use crate::lexer::*;
use std::collections::HashMap;

/// grammar
/*
grammar = {
    'program': ["class_prod ';' program", "class_prod ';'"],

    'class_prod': ["'class' 'TYPE' '{' feature_list '}'",
              "'class' 'TYPE' 'inherits' 'TYPE' '{' feature_list '}'"],

    'feature_list': ["feature ';' feature_list",
                     "feature ';'"],

    'feature': ["'ID' '(' formal_list ')' ':' 'TYPE' '{' expr '}'",
                "'ID' ':' 'TYPE' '<-' expr",
                "'ID' ':' 'TYPE'"],

    'formal_list': ["formal ',' formal_list",
                    "formal"],

    'formal': ["'ID' ':' 'TYPE'"],

    'expr_list': ["expr ',' expr_list", "expr"],

    'block_list': ["expr ';' block_list", "expr ';'"],

    'assign_list': ["'ID' ':' 'TYPE' '<-' expr ',' assign_list",
                    "'ID' ':' 'TYPE' ',' assign_list",
                    "'ID' ':' 'TYPE' '<-' expr",
                    "'ID' ':' 'TYPE'"],
    'case_list': ["'ID' ':' 'TYPE' '=>' expr ';' case_list",
                  "'ID' ':' 'TYPE' '=>' expr ';'"],

    'expr': ["'ID' '<-' expr",
             "expr '.' 'ID' '(' expr_list ')'",
             "expr '@' 'TYPE' '.' 'ID' '(' expr_list ')'",
             "'ID' '(' expr_list ')'",
             "'if' expr 'then' expr 'else' expr 'fi'",
             "'while' expr 'loop' expr 'pool'",
             "'{' block_list '}'",
             "'let' assign_list 'in' expr",
             "'case' expr 'of' case_list 'esac'",
             "'new' 'TYPE'",
             "'isvoid' expr",
             "expr '+' expr",
             "expr '-' expr",
             "expr '*' expr",
             "expr '/' expr",
             "'~' expr",
             "expr '<' expr",
             "expr '<-' expr",
             "expr '=' expr",
             "'not' expr",
             "'(' expr ')'",
             "'ID'",
             "'integer'",
             "'string'",
             "'true'",
             "'false'"],
}
*/

enum Action {
    // number or production, length of production
    Reduce(u8, u8),
    Shift(u8),
    Accept,
    Error,
}

fn production(prod: u8) -> Result<String, String> {
    match prod {
        // {{{ Productions
        0 => Ok("program -> class_prod ';' program".to_string()),
        1 => Ok("program -> class_prod ';'".to_string()),
        2 => Ok("class_prod -> 'class' 'TYPE' '{' feature_list '}'".to_string()),
        3 => Ok("class_prod -> 'class' 'TYPE' 'inherits' 'TYPE' '{' feature_list '}'".to_string()),
        4 => Ok("class_prod -> 'class' 'TYPE' 'inherits' 'TYPE' '{' '}'".to_string()),
        5 => Ok("feature_list -> feature ';' feature_list".to_string()),
        6 => Ok("feature_list -> feature ';'".to_string()),
        7 => Ok("feature -> 'ID' '(' formal_list ')' ':' 'TYPE' '{' expr '}'".to_string()),
        8 => Ok("feature -> 'ID' '(' ')' ':' 'TYPE' '{' expr '}'".to_string()),
        9 => Ok("feature -> 'ID' ':' 'TYPE' '<-' expr".to_string()),
        10 => Ok("feature -> 'ID' ':' 'TYPE'".to_string()),
        11 => Ok("formal_list -> formal ',' formal_list".to_string()),
        12 => Ok("formal_list -> formal".to_string()),
        13 => Ok("formal -> 'ID' ':' 'TYPE'".to_string()),
        14 => Ok("expr_list -> expr ',' expr_list".to_string()),
        15 => Ok("expr_list -> expr".to_string()),
        16 => Ok("block_list -> expr ';' block_list".to_string()),
        17 => Ok("block_list -> expr ';'".to_string()),
        18 => Ok("assign_list -> 'ID' ':' 'TYPE' '<-' expr ',' assign_list".to_string()),
        19 => Ok("assign_list -> 'ID' ':' 'TYPE' ',' assign_list".to_string()),
        20 => Ok("assign_list -> 'ID' ':' 'TYPE' '<-' expr".to_string()),
        21 => Ok("assign_list -> 'ID' ':' 'TYPE'".to_string()),
        22 => Ok("case_list -> 'ID' ':' 'TYPE' '=>' expr ';' case_list".to_string()),
        23 => Ok("case_list -> 'ID' ':' 'TYPE' '=>' expr ';'".to_string()),
        24 => Ok("expr -> 'ID' '<-' expr".to_string()),
        25 => Ok("expr -> expr '.' 'ID' '(' expr_list ')'".to_string()),
        26 => Ok("expr -> expr '.' 'ID' '(' ')'".to_string()),
        27 => Ok("expr -> expr '@' 'TYPE' '.' 'ID' '(' expr_list ')'".to_string()),
        28 => Ok("expr -> expr '@' 'TYPE' '.' 'ID' '(' ')'".to_string()),
        29 => Ok("expr -> 'ID' '(' expr_list ')'".to_string()),
        30 => Ok("expr -> 'ID' '(' ')'".to_string()),
        31 => Ok("expr -> 'if' expr 'then' expr 'else' expr 'fi'".to_string()),
        32 => Ok("expr -> 'while' expr 'loop' expr 'pool'".to_string()),
        33 => Ok("expr -> '{' block_list '}'".to_string()),
        34 => Ok("expr -> 'let' assign_list 'in' expr".to_string()),
        35 => Ok("expr -> 'case' expr 'of' case_list 'esac'".to_string()),
        36 => Ok("expr -> 'new' 'TYPE'".to_string()),
        37 => Ok("expr -> 'isvoid' expr".to_string()),
        38 => Ok("expr -> expr '+' expr".to_string()),
        39 => Ok("expr -> expr '-' expr".to_string()),
        40 => Ok("expr -> expr '*' expr".to_string()),
        41 => Ok("expr -> expr '/' expr".to_string()),
        42 => Ok("expr -> '~' expr".to_string()),
        43 => Ok("expr -> expr '<' expr".to_string()),
        44 => Ok("expr -> expr '<-' expr".to_string()),
        45 => Ok("expr -> expr '<=' expr".to_string()),
        46 => Ok("expr -> expr '=' expr".to_string()),
        47 => Ok("expr -> 'not' expr".to_string()),
        48 => Ok("expr -> '(' expr ')'".to_string()),
        49 => Ok("expr -> 'ID'".to_string()),
        50 => Ok("expr -> 'integer'".to_string()),
        51 => Ok("expr -> 'string'".to_string()),
        52 => Ok("expr -> 'true'".to_string()),
        53 => Ok("expr -> 'false'".to_string()),
        // }}}
        _  => Err(format!("Invalid Index {}", prod)),
    }
}

fn head_of_production(prod: u8) -> Result<u8, String> {
    match prod {
        0 | 1 => Ok(0),
        2..=4 => Ok(1),
        5 | 6 => Ok(2),
        7..=10 => Ok(3),
        11 | 12 => Ok(4),
        13 => Ok(5),
        14 | 15 => Ok(6),
        16 | 17 => Ok(7),
        18..=21 => Ok(8),
        22 | 23 => Ok(9),
        24..=54 => Ok(10),
        _ => Err(format!("Invalid Index {}", prod))
    }
}

fn action(state: &u8, token: &Token) -> Action {
    match (state, token) {
        // {{{ Parser Table: Actions
        (0, Token::Class) => Action::Shift(3), 
        (1, Token::EndOfInput) => Action::Accept, 
        (2, Token::SemiColon) => Action::Shift(4), 
        (3, Token::Type(_)) => Action::Shift(5), 
        (4, Token::Class) => Action::Shift(3), 
        (4, Token::EndOfInput) => Action::Reduce(1, 2), 
        (5, Token::LeftBrace) => Action::Shift(7), 
        (5, Token::Inherits) => Action::Shift(8), 
        (6, Token::EndOfInput) => Action::Reduce(0, 3), 
        (7, Token::Id(_)) => Action::Shift(11), 
        (8, Token::Type(_)) => Action::Shift(12), 
        (9, Token::RightBrace) => Action::Shift(13), 
        (10, Token::SemiColon) => Action::Shift(14), 
        (11, Token::Colon) => Action::Shift(15), 
        (11, Token::LeftParen) => Action::Shift(16), 
        (12, Token::LeftBrace) => Action::Shift(17), 
        (13, Token::SemiColon) => Action::Reduce(2, 5), 
        (14, Token::RightBrace) => Action::Reduce(6, 2), 
        (14, Token::Id(_)) => Action::Shift(11), 
        (15, Token::Type(_)) => Action::Shift(19), 
        (16, Token::Id(_)) => Action::Shift(22), 
        (16, Token::RightParen) => Action::Shift(23), 
        (17, Token::RightBrace) => Action::Shift(25), 
        (17, Token::Id(_)) => Action::Shift(11), 
        (18, Token::RightBrace) => Action::Reduce(5, 3), 
        (19, Token::SemiColon) => Action::Reduce(10, 3), 
        (19, Token::Assignment) => Action::Shift(26), 
        (20, Token::RightParen) => Action::Shift(27), 
        (21, Token::Comma) => Action::Shift(28), 
        (21, Token::RightParen) => Action::Reduce(12, 1), 
        (22, Token::Colon) => Action::Shift(29), 
        (23, Token::Colon) => Action::Shift(30), 
        (24, Token::RightBrace) => Action::Shift(31), 
        (25, Token::SemiColon) => Action::Reduce(4, 6), 
        (26, Token::New) => Action::Shift(33), 
        (26, Token::LeftBrace) => Action::Shift(34), 
        (26, Token::If) => Action::Shift(35), 
        (26, Token::True) => Action::Shift(36), 
        (26, Token::Let) => Action::Shift(37), 
        (26, Token::Case) => Action::Shift(38), 
        (26, Token::Integer(_)) => Action::Shift(39), 
        (26, Token::Complement) => Action::Shift(40), 
        (26, Token::StringLiteral(_)) => Action::Shift(41), 
        (26, Token::Id(_)) => Action::Shift(42), 
        (26, Token::Isvoid) => Action::Shift(43), 
        (26, Token::LeftParen) => Action::Shift(44), 
        (26, Token::While) => Action::Shift(45), 
        (26, Token::False) => Action::Shift(46), 
        (26, Token::Not) => Action::Shift(47), 
        (27, Token::Colon) => Action::Shift(48), 
        (28, Token::Id(_)) => Action::Shift(22), 
        (29, Token::Type(_)) => Action::Shift(50), 
        (30, Token::Type(_)) => Action::Shift(51), 
        (31, Token::SemiColon) => Action::Reduce(3, 7), 
        (32, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (32, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (32, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (32, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (32, Token::SemiColon) => Action::Reduce(9, 5), 
        (32, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (32, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (32, Token::At) => Action::Shift(58), 
        (32, Token::Dot) => Action::Shift(59), 
        (32, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (32, Token::Assignment) => Action::Shift(61), 
        (33, Token::Type(_)) => Action::Shift(62), 
        (34, Token::New) => Action::Shift(33), 
        (34, Token::LeftBrace) => Action::Shift(34), 
        (34, Token::If) => Action::Shift(35), 
        (34, Token::True) => Action::Shift(36), 
        (34, Token::Let) => Action::Shift(37), 
        (34, Token::Case) => Action::Shift(38), 
        (34, Token::Integer(_)) => Action::Shift(39), 
        (34, Token::Complement) => Action::Shift(40), 
        (34, Token::StringLiteral(_)) => Action::Shift(41), 
        (34, Token::Id(_)) => Action::Shift(42), 
        (34, Token::Isvoid) => Action::Shift(43), 
        (34, Token::LeftParen) => Action::Shift(44), 
        (34, Token::While) => Action::Shift(45), 
        (34, Token::False) => Action::Shift(46), 
        (34, Token::Not) => Action::Shift(47), 
        (35, Token::New) => Action::Shift(33), 
        (35, Token::LeftBrace) => Action::Shift(34), 
        (35, Token::If) => Action::Shift(35), 
        (35, Token::True) => Action::Shift(36), 
        (35, Token::Let) => Action::Shift(37), 
        (35, Token::Case) => Action::Shift(38), 
        (35, Token::Integer(_)) => Action::Shift(39), 
        (35, Token::Complement) => Action::Shift(40), 
        (35, Token::StringLiteral(_)) => Action::Shift(41), 
        (35, Token::Id(_)) => Action::Shift(42), 
        (35, Token::Isvoid) => Action::Shift(43), 
        (35, Token::LeftParen) => Action::Shift(44), 
        (35, Token::While) => Action::Shift(45), 
        (35, Token::False) => Action::Shift(46), 
        (35, Token::Not) => Action::Shift(47), 
        (36, Token::Comma) => Action::Reduce(52, 1), 
        (36, Token::MathOp(MathOp::Multiply)) => Action::Reduce(52, 1), 
        (36, Token::Fi) => Action::Reduce(52, 1), 
        (36, Token::Pool) => Action::Reduce(52, 1), 
        (36, Token::Of) => Action::Reduce(52, 1), 
        (36, Token::Relop(Relop::EE)) => Action::Reduce(52, 1), 
        (36, Token::MathOp(MathOp::Divide)) => Action::Reduce(52, 1), 
        (36, Token::MathOp(MathOp::Plus)) => Action::Reduce(52, 1), 
        (36, Token::SemiColon) => Action::Reduce(52, 1), 
        (36, Token::MathOp(MathOp::Minus)) => Action::Reduce(52, 1), 
        (36, Token::RightBrace) => Action::Reduce(52, 1), 
        (36, Token::Loop) => Action::Reduce(52, 1), 
        (36, Token::Relop(Relop::LT)) => Action::Reduce(52, 1), 
        (36, Token::At) => Action::Reduce(52, 1), 
        (36, Token::RightParen) => Action::Reduce(52, 1), 
        (36, Token::Dot) => Action::Reduce(52, 1), 
        (36, Token::Else) => Action::Reduce(52, 1), 
        (36, Token::Relop(Relop::LE)) => Action::Reduce(52, 1), 
        (36, Token::In) => Action::Reduce(52, 1), 
        (36, Token::Assignment) => Action::Reduce(52, 1), 
        (36, Token::Then) => Action::Reduce(52, 1), 
        (37, Token::Id(_)) => Action::Shift(67), 
        (38, Token::New) => Action::Shift(33), 
        (38, Token::LeftBrace) => Action::Shift(34), 
        (38, Token::If) => Action::Shift(35), 
        (38, Token::True) => Action::Shift(36), 
        (38, Token::Let) => Action::Shift(37), 
        (38, Token::Case) => Action::Shift(38), 
        (38, Token::Integer(_)) => Action::Shift(39), 
        (38, Token::Complement) => Action::Shift(40), 
        (38, Token::StringLiteral(_)) => Action::Shift(41), 
        (38, Token::Id(_)) => Action::Shift(42), 
        (38, Token::Isvoid) => Action::Shift(43), 
        (38, Token::LeftParen) => Action::Shift(44), 
        (38, Token::While) => Action::Shift(45), 
        (38, Token::False) => Action::Shift(46), 
        (38, Token::Not) => Action::Shift(47), 
        (39, Token::Comma) => Action::Reduce(50, 1), 
        (39, Token::MathOp(MathOp::Multiply)) => Action::Reduce(50, 1), 
        (39, Token::Fi) => Action::Reduce(50, 1), 
        (39, Token::Pool) => Action::Reduce(50, 1), 
        (39, Token::Of) => Action::Reduce(50, 1), 
        (39, Token::Relop(Relop::EE)) => Action::Reduce(50, 1), 
        (39, Token::MathOp(MathOp::Divide)) => Action::Reduce(50, 1), 
        (39, Token::MathOp(MathOp::Plus)) => Action::Reduce(50, 1), 
        (39, Token::SemiColon) => Action::Reduce(50, 1), 
        (39, Token::MathOp(MathOp::Minus)) => Action::Reduce(50, 1), 
        (39, Token::RightBrace) => Action::Reduce(50, 1), 
        (39, Token::Loop) => Action::Reduce(50, 1), 
        (39, Token::Relop(Relop::LT)) => Action::Reduce(50, 1), 
        (39, Token::At) => Action::Reduce(50, 1), 
        (39, Token::RightParen) => Action::Reduce(50, 1), 
        (39, Token::Dot) => Action::Reduce(50, 1), 
        (39, Token::Else) => Action::Reduce(50, 1), 
        (39, Token::Relop(Relop::LE)) => Action::Reduce(50, 1), 
        (39, Token::In) => Action::Reduce(50, 1), 
        (39, Token::Assignment) => Action::Reduce(50, 1), 
        (39, Token::Then) => Action::Reduce(50, 1), 
        (40, Token::New) => Action::Shift(33), 
        (40, Token::LeftBrace) => Action::Shift(34), 
        (40, Token::If) => Action::Shift(35), 
        (40, Token::True) => Action::Shift(36), 
        (40, Token::Let) => Action::Shift(37), 
        (40, Token::Case) => Action::Shift(38), 
        (40, Token::Integer(_)) => Action::Shift(39), 
        (40, Token::Complement) => Action::Shift(40), 
        (40, Token::StringLiteral(_)) => Action::Shift(41), 
        (40, Token::Id(_)) => Action::Shift(42), 
        (40, Token::Isvoid) => Action::Shift(43), 
        (40, Token::LeftParen) => Action::Shift(44), 
        (40, Token::While) => Action::Shift(45), 
        (40, Token::False) => Action::Shift(46), 
        (40, Token::Not) => Action::Shift(47), 
        (41, Token::Comma) => Action::Reduce(51, 1), 
        (41, Token::MathOp(MathOp::Multiply)) => Action::Reduce(51, 1), 
        (41, Token::Fi) => Action::Reduce(51, 1), 
        (41, Token::Pool) => Action::Reduce(51, 1), 
        (41, Token::Of) => Action::Reduce(51, 1), 
        (41, Token::Relop(Relop::EE)) => Action::Reduce(51, 1), 
        (41, Token::MathOp(MathOp::Divide)) => Action::Reduce(51, 1), 
        (41, Token::MathOp(MathOp::Plus)) => Action::Reduce(51, 1), 
        (41, Token::SemiColon) => Action::Reduce(51, 1), 
        (41, Token::MathOp(MathOp::Minus)) => Action::Reduce(51, 1), 
        (41, Token::RightBrace) => Action::Reduce(51, 1), 
        (41, Token::Loop) => Action::Reduce(51, 1), 
        (41, Token::Relop(Relop::LT)) => Action::Reduce(51, 1), 
        (41, Token::At) => Action::Reduce(51, 1), 
        (41, Token::RightParen) => Action::Reduce(51, 1), 
        (41, Token::Dot) => Action::Reduce(51, 1), 
        (41, Token::Else) => Action::Reduce(51, 1), 
        (41, Token::Relop(Relop::LE)) => Action::Reduce(51, 1), 
        (41, Token::In) => Action::Reduce(51, 1), 
        (41, Token::Assignment) => Action::Reduce(51, 1), 
        (41, Token::Then) => Action::Reduce(51, 1), 
        (42, Token::Comma) => Action::Reduce(49, 1), 
        (42, Token::MathOp(MathOp::Multiply)) => Action::Reduce(49, 1), 
        (42, Token::Fi) => Action::Reduce(49, 1), 
        (42, Token::Pool) => Action::Reduce(49, 1), 
        (42, Token::Of) => Action::Reduce(49, 1), 
        (42, Token::Relop(Relop::EE)) => Action::Reduce(49, 1), 
        (42, Token::MathOp(MathOp::Divide)) => Action::Reduce(49, 1), 
        (42, Token::MathOp(MathOp::Plus)) => Action::Reduce(49, 1), 
        (42, Token::SemiColon) => Action::Reduce(49, 1), 
        (42, Token::MathOp(MathOp::Minus)) => Action::Reduce(49, 1), 
        (42, Token::RightBrace) => Action::Reduce(49, 1), 
        (42, Token::Loop) => Action::Reduce(49, 1), 
        (42, Token::Relop(Relop::LT)) => Action::Reduce(49, 1), 
        (42, Token::At) => Action::Reduce(49, 1), 
        (42, Token::LeftParen) => Action::Shift(70), 
        (42, Token::RightParen) => Action::Reduce(49, 1), 
        (42, Token::Dot) => Action::Reduce(49, 1), 
        (42, Token::Else) => Action::Reduce(49, 1), 
        (42, Token::Relop(Relop::LE)) => Action::Reduce(49, 1), 
        (42, Token::In) => Action::Reduce(49, 1), 
        (42, Token::Assignment) => Action::Shift(71), 
        (42, Token::Then) => Action::Reduce(49, 1), 
        (43, Token::New) => Action::Shift(33), 
        (43, Token::LeftBrace) => Action::Shift(34), 
        (43, Token::If) => Action::Shift(35), 
        (43, Token::True) => Action::Shift(36), 
        (43, Token::Let) => Action::Shift(37), 
        (43, Token::Case) => Action::Shift(38), 
        (43, Token::Integer(_)) => Action::Shift(39), 
        (43, Token::Complement) => Action::Shift(40), 
        (43, Token::StringLiteral(_)) => Action::Shift(41), 
        (43, Token::Id(_)) => Action::Shift(42), 
        (43, Token::Isvoid) => Action::Shift(43), 
        (43, Token::LeftParen) => Action::Shift(44), 
        (43, Token::While) => Action::Shift(45), 
        (43, Token::False) => Action::Shift(46), 
        (43, Token::Not) => Action::Shift(47), 
        (44, Token::New) => Action::Shift(33), 
        (44, Token::LeftBrace) => Action::Shift(34), 
        (44, Token::If) => Action::Shift(35), 
        (44, Token::True) => Action::Shift(36), 
        (44, Token::Let) => Action::Shift(37), 
        (44, Token::Case) => Action::Shift(38), 
        (44, Token::Integer(_)) => Action::Shift(39), 
        (44, Token::Complement) => Action::Shift(40), 
        (44, Token::StringLiteral(_)) => Action::Shift(41), 
        (44, Token::Id(_)) => Action::Shift(42), 
        (44, Token::Isvoid) => Action::Shift(43), 
        (44, Token::LeftParen) => Action::Shift(44), 
        (44, Token::While) => Action::Shift(45), 
        (44, Token::False) => Action::Shift(46), 
        (44, Token::Not) => Action::Shift(47), 
        (45, Token::New) => Action::Shift(33), 
        (45, Token::LeftBrace) => Action::Shift(34), 
        (45, Token::If) => Action::Shift(35), 
        (45, Token::True) => Action::Shift(36), 
        (45, Token::Let) => Action::Shift(37), 
        (45, Token::Case) => Action::Shift(38), 
        (45, Token::Integer(_)) => Action::Shift(39), 
        (45, Token::Complement) => Action::Shift(40), 
        (45, Token::StringLiteral(_)) => Action::Shift(41), 
        (45, Token::Id(_)) => Action::Shift(42), 
        (45, Token::Isvoid) => Action::Shift(43), 
        (45, Token::LeftParen) => Action::Shift(44), 
        (45, Token::While) => Action::Shift(45), 
        (45, Token::False) => Action::Shift(46), 
        (45, Token::Not) => Action::Shift(47), 
        (46, Token::Comma) => Action::Reduce(53, 1), 
        (46, Token::MathOp(MathOp::Multiply)) => Action::Reduce(53, 1), 
        (46, Token::Fi) => Action::Reduce(53, 1), 
        (46, Token::Pool) => Action::Reduce(53, 1), 
        (46, Token::Of) => Action::Reduce(53, 1), 
        (46, Token::Relop(Relop::EE)) => Action::Reduce(53, 1), 
        (46, Token::MathOp(MathOp::Divide)) => Action::Reduce(53, 1), 
        (46, Token::MathOp(MathOp::Plus)) => Action::Reduce(53, 1), 
        (46, Token::SemiColon) => Action::Reduce(53, 1), 
        (46, Token::MathOp(MathOp::Minus)) => Action::Reduce(53, 1), 
        (46, Token::RightBrace) => Action::Reduce(53, 1), 
        (46, Token::Loop) => Action::Reduce(53, 1), 
        (46, Token::Relop(Relop::LT)) => Action::Reduce(53, 1), 
        (46, Token::At) => Action::Reduce(53, 1), 
        (46, Token::RightParen) => Action::Reduce(53, 1), 
        (46, Token::Dot) => Action::Reduce(53, 1), 
        (46, Token::Else) => Action::Reduce(53, 1), 
        (46, Token::Relop(Relop::LE)) => Action::Reduce(53, 1), 
        (46, Token::In) => Action::Reduce(53, 1), 
        (46, Token::Assignment) => Action::Reduce(53, 1), 
        (46, Token::Then) => Action::Reduce(53, 1), 
        (47, Token::New) => Action::Shift(33), 
        (47, Token::LeftBrace) => Action::Shift(34), 
        (47, Token::If) => Action::Shift(35), 
        (47, Token::True) => Action::Shift(36), 
        (47, Token::Let) => Action::Shift(37), 
        (47, Token::Case) => Action::Shift(38), 
        (47, Token::Integer(_)) => Action::Shift(39), 
        (47, Token::Complement) => Action::Shift(40), 
        (47, Token::StringLiteral(_)) => Action::Shift(41), 
        (47, Token::Id(_)) => Action::Shift(42), 
        (47, Token::Isvoid) => Action::Shift(43), 
        (47, Token::LeftParen) => Action::Shift(44), 
        (47, Token::While) => Action::Shift(45), 
        (47, Token::False) => Action::Shift(46), 
        (47, Token::Not) => Action::Shift(47), 
        (48, Token::Type(_)) => Action::Shift(76), 
        (49, Token::RightParen) => Action::Reduce(11, 3), 
        (50, Token::Comma) => Action::Reduce(13, 3), 
        (50, Token::RightParen) => Action::Reduce(13, 3), 
        (51, Token::LeftBrace) => Action::Shift(77), 
        (52, Token::New) => Action::Shift(33), 
        (52, Token::LeftBrace) => Action::Shift(34), 
        (52, Token::If) => Action::Shift(35), 
        (52, Token::True) => Action::Shift(36), 
        (52, Token::Let) => Action::Shift(37), 
        (52, Token::Case) => Action::Shift(38), 
        (52, Token::Integer(_)) => Action::Shift(39), 
        (52, Token::Complement) => Action::Shift(40), 
        (52, Token::StringLiteral(_)) => Action::Shift(41), 
        (52, Token::Id(_)) => Action::Shift(42), 
        (52, Token::Isvoid) => Action::Shift(43), 
        (52, Token::LeftParen) => Action::Shift(44), 
        (52, Token::While) => Action::Shift(45), 
        (52, Token::False) => Action::Shift(46), 
        (52, Token::Not) => Action::Shift(47), 
        (53, Token::New) => Action::Shift(33), 
        (53, Token::LeftBrace) => Action::Shift(34), 
        (53, Token::If) => Action::Shift(35), 
        (53, Token::True) => Action::Shift(36), 
        (53, Token::Let) => Action::Shift(37), 
        (53, Token::Case) => Action::Shift(38), 
        (53, Token::Integer(_)) => Action::Shift(39), 
        (53, Token::Complement) => Action::Shift(40), 
        (53, Token::StringLiteral(_)) => Action::Shift(41), 
        (53, Token::Id(_)) => Action::Shift(42), 
        (53, Token::Isvoid) => Action::Shift(43), 
        (53, Token::LeftParen) => Action::Shift(44), 
        (53, Token::While) => Action::Shift(45), 
        (53, Token::False) => Action::Shift(46), 
        (53, Token::Not) => Action::Shift(47), 
        (54, Token::New) => Action::Shift(33), 
        (54, Token::LeftBrace) => Action::Shift(34), 
        (54, Token::If) => Action::Shift(35), 
        (54, Token::True) => Action::Shift(36), 
        (54, Token::Let) => Action::Shift(37), 
        (54, Token::Case) => Action::Shift(38), 
        (54, Token::Integer(_)) => Action::Shift(39), 
        (54, Token::Complement) => Action::Shift(40), 
        (54, Token::StringLiteral(_)) => Action::Shift(41), 
        (54, Token::Id(_)) => Action::Shift(42), 
        (54, Token::Isvoid) => Action::Shift(43), 
        (54, Token::LeftParen) => Action::Shift(44), 
        (54, Token::While) => Action::Shift(45), 
        (54, Token::False) => Action::Shift(46), 
        (54, Token::Not) => Action::Shift(47), 
        (55, Token::New) => Action::Shift(33), 
        (55, Token::LeftBrace) => Action::Shift(34), 
        (55, Token::If) => Action::Shift(35), 
        (55, Token::True) => Action::Shift(36), 
        (55, Token::Let) => Action::Shift(37), 
        (55, Token::Case) => Action::Shift(38), 
        (55, Token::Integer(_)) => Action::Shift(39), 
        (55, Token::Complement) => Action::Shift(40), 
        (55, Token::StringLiteral(_)) => Action::Shift(41), 
        (55, Token::Id(_)) => Action::Shift(42), 
        (55, Token::Isvoid) => Action::Shift(43), 
        (55, Token::LeftParen) => Action::Shift(44), 
        (55, Token::While) => Action::Shift(45), 
        (55, Token::False) => Action::Shift(46), 
        (55, Token::Not) => Action::Shift(47), 
        (56, Token::New) => Action::Shift(33), 
        (56, Token::LeftBrace) => Action::Shift(34), 
        (56, Token::If) => Action::Shift(35), 
        (56, Token::True) => Action::Shift(36), 
        (56, Token::Let) => Action::Shift(37), 
        (56, Token::Case) => Action::Shift(38), 
        (56, Token::Integer(_)) => Action::Shift(39), 
        (56, Token::Complement) => Action::Shift(40), 
        (56, Token::StringLiteral(_)) => Action::Shift(41), 
        (56, Token::Id(_)) => Action::Shift(42), 
        (56, Token::Isvoid) => Action::Shift(43), 
        (56, Token::LeftParen) => Action::Shift(44), 
        (56, Token::While) => Action::Shift(45), 
        (56, Token::False) => Action::Shift(46), 
        (56, Token::Not) => Action::Shift(47), 
        (57, Token::New) => Action::Shift(33), 
        (57, Token::LeftBrace) => Action::Shift(34), 
        (57, Token::If) => Action::Shift(35), 
        (57, Token::True) => Action::Shift(36), 
        (57, Token::Let) => Action::Shift(37), 
        (57, Token::Case) => Action::Shift(38), 
        (57, Token::Integer(_)) => Action::Shift(39), 
        (57, Token::Complement) => Action::Shift(40), 
        (57, Token::StringLiteral(_)) => Action::Shift(41), 
        (57, Token::Id(_)) => Action::Shift(42), 
        (57, Token::Isvoid) => Action::Shift(43), 
        (57, Token::LeftParen) => Action::Shift(44), 
        (57, Token::While) => Action::Shift(45), 
        (57, Token::False) => Action::Shift(46), 
        (57, Token::Not) => Action::Shift(47), 
        (58, Token::Type(_)) => Action::Shift(84), 
        (59, Token::Id(_)) => Action::Shift(85), 
        (60, Token::New) => Action::Shift(33), 
        (60, Token::LeftBrace) => Action::Shift(34), 
        (60, Token::If) => Action::Shift(35), 
        (60, Token::True) => Action::Shift(36), 
        (60, Token::Let) => Action::Shift(37), 
        (60, Token::Case) => Action::Shift(38), 
        (60, Token::Integer(_)) => Action::Shift(39), 
        (60, Token::Complement) => Action::Shift(40), 
        (60, Token::StringLiteral(_)) => Action::Shift(41), 
        (60, Token::Id(_)) => Action::Shift(42), 
        (60, Token::Isvoid) => Action::Shift(43), 
        (60, Token::LeftParen) => Action::Shift(44), 
        (60, Token::While) => Action::Shift(45), 
        (60, Token::False) => Action::Shift(46), 
        (60, Token::Not) => Action::Shift(47), 
        (61, Token::New) => Action::Shift(33), 
        (61, Token::LeftBrace) => Action::Shift(34), 
        (61, Token::If) => Action::Shift(35), 
        (61, Token::True) => Action::Shift(36), 
        (61, Token::Let) => Action::Shift(37), 
        (61, Token::Case) => Action::Shift(38), 
        (61, Token::Integer(_)) => Action::Shift(39), 
        (61, Token::Complement) => Action::Shift(40), 
        (61, Token::StringLiteral(_)) => Action::Shift(41), 
        (61, Token::Id(_)) => Action::Shift(42), 
        (61, Token::Isvoid) => Action::Shift(43), 
        (61, Token::LeftParen) => Action::Shift(44), 
        (61, Token::While) => Action::Shift(45), 
        (61, Token::False) => Action::Shift(46), 
        (61, Token::Not) => Action::Shift(47), 
        (62, Token::Comma) => Action::Reduce(36, 2), 
        (62, Token::MathOp(MathOp::Multiply)) => Action::Reduce(36, 2), 
        (62, Token::Fi) => Action::Reduce(36, 2), 
        (62, Token::Pool) => Action::Reduce(36, 2), 
        (62, Token::Of) => Action::Reduce(36, 2), 
        (62, Token::Relop(Relop::EE)) => Action::Reduce(36, 2), 
        (62, Token::MathOp(MathOp::Divide)) => Action::Reduce(36, 2), 
        (62, Token::MathOp(MathOp::Plus)) => Action::Reduce(36, 2), 
        (62, Token::SemiColon) => Action::Reduce(36, 2), 
        (62, Token::MathOp(MathOp::Minus)) => Action::Reduce(36, 2), 
        (62, Token::RightBrace) => Action::Reduce(36, 2), 
        (62, Token::Loop) => Action::Reduce(36, 2), 
        (62, Token::Relop(Relop::LT)) => Action::Reduce(36, 2), 
        (62, Token::At) => Action::Reduce(36, 2), 
        (62, Token::RightParen) => Action::Reduce(36, 2), 
        (62, Token::Dot) => Action::Reduce(36, 2), 
        (62, Token::Else) => Action::Reduce(36, 2), 
        (62, Token::Relop(Relop::LE)) => Action::Reduce(36, 2), 
        (62, Token::In) => Action::Reduce(36, 2), 
        (62, Token::Assignment) => Action::Reduce(36, 2), 
        (62, Token::Then) => Action::Reduce(36, 2), 
        (63, Token::RightBrace) => Action::Shift(88), 
        (64, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (64, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (64, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (64, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (64, Token::SemiColon) => Action::Shift(89), 
        (64, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (64, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (64, Token::At) => Action::Shift(58), 
        (64, Token::Dot) => Action::Shift(59), 
        (64, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (64, Token::Assignment) => Action::Shift(61), 
        (65, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (65, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (65, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (65, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (65, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (65, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (65, Token::At) => Action::Shift(58), 
        (65, Token::Dot) => Action::Shift(59), 
        (65, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (65, Token::Assignment) => Action::Shift(61), 
        (65, Token::Then) => Action::Shift(90), 
        (66, Token::In) => Action::Shift(91), 
        (67, Token::Colon) => Action::Shift(92), 
        (68, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (68, Token::Of) => Action::Shift(93), 
        (68, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (68, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (68, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (68, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (68, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (68, Token::At) => Action::Shift(58), 
        (68, Token::Dot) => Action::Shift(59), 
        (68, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (68, Token::Assignment) => Action::Shift(61), 
        (69, Token::Comma) => Action::Reduce(42, 2), 
        (69, Token::MathOp(MathOp::Multiply)) => Action::Reduce(42, 2),
        (69, Token::Fi) => Action::Reduce(42, 2), 
        (69, Token::Pool) => Action::Reduce(42, 2), 
        (69, Token::Of) => Action::Reduce(42, 2), 
        (69, Token::Relop(Relop::EE)) => Action::Reduce(42, 2),
        (69, Token::MathOp(MathOp::Divide)) => Action::Reduce(42, 2),
        (69, Token::MathOp(MathOp::Plus)) => Action::Reduce(42, 2),
        (69, Token::SemiColon) => Action::Reduce(42, 2), 
        (69, Token::MathOp(MathOp::Minus)) => Action::Reduce(42, 2),
        (69, Token::RightBrace) => Action::Reduce(42, 2), 
        (69, Token::Loop) => Action::Reduce(42, 2), 
        (69, Token::Relop(Relop::LT)) => Action::Reduce(42, 2),
        (69, Token::At) => Action::Shift(58), 
        (69, Token::RightParen) => Action::Reduce(42, 2), 
        (69, Token::Dot) => Action::Shift(59), 
        (69, Token::Else) => Action::Reduce(42, 2), 
        (69, Token::Relop(Relop::LE)) => Action::Reduce(42, 2),
        (69, Token::In) => Action::Reduce(42, 2), 
        (69, Token::Assignment) => Action::Reduce(42, 2),
        (69, Token::Then) => Action::Reduce(42, 2), 
        (70, Token::New) => Action::Shift(33), 
        (70, Token::LeftBrace) => Action::Shift(34), 
        (70, Token::If) => Action::Shift(35), 
        (70, Token::True) => Action::Shift(36), 
        (70, Token::Let) => Action::Shift(37), 
        (70, Token::Case) => Action::Shift(38), 
        (70, Token::Integer(_)) => Action::Shift(39), 
        (70, Token::Complement) => Action::Shift(40), 
        (70, Token::StringLiteral(_)) => Action::Shift(41), 
        (70, Token::Id(_)) => Action::Shift(42), 
        (70, Token::Isvoid) => Action::Shift(43), 
        (70, Token::LeftParen) => Action::Shift(44), 
        (70, Token::RightParen) => Action::Shift(96), 
        (70, Token::While) => Action::Shift(45), 
        (70, Token::False) => Action::Shift(46), 
        (70, Token::Not) => Action::Shift(47), 
        (71, Token::New) => Action::Shift(33), 
        (71, Token::LeftBrace) => Action::Shift(34), 
        (71, Token::If) => Action::Shift(35), 
        (71, Token::True) => Action::Shift(36), 
        (71, Token::Let) => Action::Shift(37), 
        (71, Token::Case) => Action::Shift(38), 
        (71, Token::Integer(_)) => Action::Shift(39), 
        (71, Token::Complement) => Action::Shift(40), 
        (71, Token::StringLiteral(_)) => Action::Shift(41), 
        (71, Token::Id(_)) => Action::Shift(42), 
        (71, Token::Isvoid) => Action::Shift(43), 
        (71, Token::LeftParen) => Action::Shift(44), 
        (71, Token::While) => Action::Shift(45), 
        (71, Token::False) => Action::Shift(46), 
        (71, Token::Not) => Action::Shift(47), 
        (72, Token::Comma) => Action::Reduce(37, 2), 
        (72, Token::MathOp(MathOp::Multiply)) => Action::Reduce(37, 2),
        (72, Token::Fi) => Action::Reduce(37, 2), 
        (72, Token::Pool) => Action::Reduce(37, 2), 
        (72, Token::Of) => Action::Reduce(37, 2), 
        (72, Token::Relop(Relop::EE)) => Action::Reduce(37, 2),
        (72, Token::MathOp(MathOp::Divide)) => Action::Reduce(37, 2),
        (72, Token::MathOp(MathOp::Plus)) => Action::Reduce(37, 2),
        (72, Token::SemiColon) => Action::Reduce(37, 2), 
        (72, Token::MathOp(MathOp::Minus)) => Action::Reduce(37, 2),
        (72, Token::RightBrace) => Action::Reduce(37, 2), 
        (72, Token::Loop) => Action::Reduce(37, 2), 
        (72, Token::Relop(Relop::LT)) => Action::Reduce(37, 2),
        (72, Token::At) => Action::Shift(58), 
        (72, Token::RightParen) => Action::Reduce(37, 2), 
        (72, Token::Dot) => Action::Shift(59), 
        (72, Token::Else) => Action::Reduce(37, 2), 
        (72, Token::Relop(Relop::LE)) => Action::Reduce(37, 2),
        (72, Token::In) => Action::Reduce(37, 2), 
        (72, Token::Assignment) => Action::Reduce(37, 2),
        (72, Token::Then) => Action::Reduce(37, 2), 
        (73, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (73, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (73, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (73, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (73, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (73, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (73, Token::At) => Action::Shift(58), 
        (73, Token::RightParen) => Action::Shift(98), 
        (73, Token::Dot) => Action::Shift(59), 
        (73, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (73, Token::Assignment) => Action::Shift(61), 
        (74, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (74, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (74, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (74, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (74, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (74, Token::Loop) => Action::Shift(99), 
        (74, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (74, Token::At) => Action::Shift(58), 
        (74, Token::Dot) => Action::Shift(59), 
        (74, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (74, Token::Assignment) => Action::Shift(61), 
        (75, Token::Comma) => Action::Reduce(47, 2), 
        (75, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (75, Token::Fi) => Action::Reduce(47, 2), 
        (75, Token::Pool) => Action::Reduce(47, 2), 
        (75, Token::Of) => Action::Reduce(47, 2), 
        (75, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (75, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (75, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (75, Token::SemiColon) => Action::Reduce(47, 2), 
        (75, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (75, Token::RightBrace) => Action::Reduce(47, 2), 
        (75, Token::Loop) => Action::Reduce(47, 2), 
        (75, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (75, Token::At) => Action::Shift(58), 
        (75, Token::RightParen) => Action::Reduce(47, 2), 
        (75, Token::Dot) => Action::Shift(59), 
        (75, Token::Else) => Action::Reduce(47, 2), 
        (75, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (75, Token::In) => Action::Reduce(47, 2), 
        (75, Token::Assignment) => Action::Reduce(47, 2),
        (75, Token::Then) => Action::Reduce(47, 2), 
        (76, Token::LeftBrace) => Action::Shift(100), 
        (77, Token::New) => Action::Shift(33), 
        (77, Token::LeftBrace) => Action::Shift(34), 
        (77, Token::If) => Action::Shift(35), 
        (77, Token::True) => Action::Shift(36), 
        (77, Token::Let) => Action::Shift(37), 
        (77, Token::Case) => Action::Shift(38), 
        (77, Token::Integer(_)) => Action::Shift(39), 
        (77, Token::Complement) => Action::Shift(40), 
        (77, Token::StringLiteral(_)) => Action::Shift(41), 
        (77, Token::Id(_)) => Action::Shift(42), 
        (77, Token::Isvoid) => Action::Shift(43), 
        (77, Token::LeftParen) => Action::Shift(44), 
        (77, Token::While) => Action::Shift(45), 
        (77, Token::False) => Action::Shift(46), 
        (77, Token::Not) => Action::Shift(47), 
        (78, Token::Comma) => Action::Reduce(40, 3), 
        (78, Token::MathOp(MathOp::Multiply)) => Action::Reduce(40, 3),
        (78, Token::Fi) => Action::Reduce(40, 3), 
        (78, Token::Pool) => Action::Reduce(40, 3), 
        (78, Token::Of) => Action::Reduce(40, 3), 
        (78, Token::Relop(Relop::EE)) => Action::Reduce(40, 3),
        (78, Token::MathOp(MathOp::Divide)) => Action::Reduce(40, 3),
        (78, Token::MathOp(MathOp::Plus)) => Action::Reduce(40, 3),
        (78, Token::SemiColon) => Action::Reduce(40, 3), 
        (78, Token::MathOp(MathOp::Minus)) => Action::Reduce(40, 3),
        (78, Token::RightBrace) => Action::Reduce(40, 3), 
        (78, Token::Loop) => Action::Reduce(40, 3), 
        (78, Token::Relop(Relop::LT)) => Action::Reduce(40, 3),
        (78, Token::At) => Action::Shift(58), 
        (78, Token::RightParen) => Action::Reduce(40, 3), 
        (78, Token::Dot) => Action::Shift(59), 
        (78, Token::Else) => Action::Reduce(40, 3), 
        (78, Token::Relop(Relop::LE)) => Action::Reduce(40, 3),
        (78, Token::In) => Action::Reduce(40, 3), 
        (78, Token::Assignment) => Action::Reduce(40, 3),
        (78, Token::Then) => Action::Reduce(40, 3), 
        (79, Token::Comma) => Action::Reduce(46, 3), 
        (79, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (79, Token::Fi) => Action::Reduce(46, 3), 
        (79, Token::Pool) => Action::Reduce(46, 3), 
        (79, Token::Of) => Action::Reduce(46, 3), 
        (79, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (79, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (79, Token::SemiColon) => Action::Reduce(46, 3), 
        (79, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (79, Token::RightBrace) => Action::Reduce(46, 3), 
        (79, Token::Loop) => Action::Reduce(46, 3), 
        (79, Token::At) => Action::Shift(58), 
        (79, Token::RightParen) => Action::Reduce(46, 3), 
        (79, Token::Dot) => Action::Shift(59), 
        (79, Token::Else) => Action::Reduce(46, 3), 
        (79, Token::In) => Action::Reduce(46, 3), 
        (79, Token::Assignment) => Action::Reduce(46, 3),
        (79, Token::Then) => Action::Reduce(46, 3), 
        (80, Token::Comma) => Action::Reduce(41, 3), 
        (80, Token::MathOp(MathOp::Multiply)) => Action::Reduce(41, 3),
        (80, Token::Fi) => Action::Reduce(41, 3), 
        (80, Token::Pool) => Action::Reduce(41, 3), 
        (80, Token::Of) => Action::Reduce(41, 3), 
        (80, Token::Relop(Relop::EE)) => Action::Reduce(41, 3),
        (80, Token::MathOp(MathOp::Divide)) => Action::Reduce(41, 3),
        (80, Token::MathOp(MathOp::Plus)) => Action::Reduce(41, 3),
        (80, Token::SemiColon) => Action::Reduce(41, 3), 
        (80, Token::MathOp(MathOp::Minus)) => Action::Reduce(41, 3),
        (80, Token::RightBrace) => Action::Reduce(41, 3), 
        (80, Token::Loop) => Action::Reduce(41, 3), 
        (80, Token::Relop(Relop::LT)) => Action::Reduce(41, 3),
        (80, Token::At) => Action::Shift(58), 
        (80, Token::RightParen) => Action::Reduce(41, 3), 
        (80, Token::Dot) => Action::Shift(59), 
        (80, Token::Else) => Action::Reduce(41, 3), 
        (80, Token::Relop(Relop::LE)) => Action::Reduce(41, 3),
        (80, Token::In) => Action::Reduce(41, 3), 
        (80, Token::Assignment) => Action::Reduce(41, 3),
        (80, Token::Then) => Action::Reduce(41, 3), 
        (81, Token::Comma) => Action::Reduce(38, 3), 
        (81, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (81, Token::Fi) => Action::Reduce(38, 3), 
        (81, Token::Pool) => Action::Reduce(38, 3), 
        (81, Token::Of) => Action::Reduce(38, 3), 
        (81, Token::Relop(Relop::EE)) => Action::Reduce(38, 3),
        (81, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (81, Token::MathOp(MathOp::Plus)) => Action::Reduce(38, 3),
        (81, Token::SemiColon) => Action::Reduce(38, 3), 
        (81, Token::MathOp(MathOp::Minus)) => Action::Reduce(38, 3),
        (81, Token::RightBrace) => Action::Reduce(38, 3), 
        (81, Token::Loop) => Action::Reduce(38, 3), 
        (81, Token::Relop(Relop::LT)) => Action::Reduce(38, 3),
        (81, Token::At) => Action::Shift(58), 
        (81, Token::RightParen) => Action::Reduce(38, 3), 
        (81, Token::Dot) => Action::Shift(59), 
        (81, Token::Else) => Action::Reduce(38, 3), 
        (81, Token::Relop(Relop::LE)) => Action::Reduce(38, 3),
        (81, Token::In) => Action::Reduce(38, 3), 
        (81, Token::Assignment) => Action::Reduce(38, 3),
        (81, Token::Then) => Action::Reduce(38, 3), 
        (82, Token::Comma) => Action::Reduce(39, 3), 
        (82, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (82, Token::Fi) => Action::Reduce(39, 3), 
        (82, Token::Pool) => Action::Reduce(39, 3), 
        (82, Token::Of) => Action::Reduce(39, 3), 
        (82, Token::Relop(Relop::EE)) => Action::Reduce(39, 3),
        (82, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (82, Token::MathOp(MathOp::Plus)) => Action::Reduce(39, 3),
        (82, Token::SemiColon) => Action::Reduce(39, 3), 
        (82, Token::MathOp(MathOp::Minus)) => Action::Reduce(39, 3),
        (82, Token::RightBrace) => Action::Reduce(39, 3), 
        (82, Token::Loop) => Action::Reduce(39, 3), 
        (82, Token::Relop(Relop::LT)) => Action::Reduce(39, 3),
        (82, Token::At) => Action::Shift(58), 
        (82, Token::RightParen) => Action::Reduce(39, 3), 
        (82, Token::Dot) => Action::Shift(59), 
        (82, Token::Else) => Action::Reduce(39, 3), 
        (82, Token::Relop(Relop::LE)) => Action::Reduce(39, 3),
        (82, Token::In) => Action::Reduce(39, 3), 
        (82, Token::Assignment) => Action::Reduce(39, 3),
        (82, Token::Then) => Action::Reduce(39, 3), 
        (83, Token::Comma) => Action::Reduce(43, 3), 
        (83, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (83, Token::Fi) => Action::Reduce(43, 3), 
        (83, Token::Pool) => Action::Reduce(43, 3), 
        (83, Token::Of) => Action::Reduce(43, 3), 
        (83, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (83, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (83, Token::SemiColon) => Action::Reduce(43, 3), 
        (83, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (83, Token::RightBrace) => Action::Reduce(43, 3), 
        (83, Token::Loop) => Action::Reduce(43, 3), 
        (83, Token::At) => Action::Shift(58), 
        (83, Token::RightParen) => Action::Reduce(43, 3), 
        (83, Token::Dot) => Action::Shift(59), 
        (83, Token::Else) => Action::Reduce(43, 3), 
        (83, Token::In) => Action::Reduce(43, 3), 
        (83, Token::Assignment) => Action::Reduce(43, 3),
        (83, Token::Then) => Action::Reduce(43, 3), 
        (84, Token::Dot) => Action::Shift(102), 
        (85, Token::LeftParen) => Action::Shift(103), 
        (86, Token::Comma) => Action::Reduce(45, 3), 
        (86, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (86, Token::Fi) => Action::Reduce(45, 3), 
        (86, Token::Pool) => Action::Reduce(45, 3), 
        (86, Token::Of) => Action::Reduce(45, 3), 
        (86, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (86, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (86, Token::SemiColon) => Action::Reduce(45, 3), 
        (86, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (86, Token::RightBrace) => Action::Reduce(45, 3), 
        (86, Token::Loop) => Action::Reduce(45, 3), 
        (86, Token::At) => Action::Shift(58), 
        (86, Token::RightParen) => Action::Reduce(45, 3), 
        (86, Token::Dot) => Action::Shift(59), 
        (86, Token::Else) => Action::Reduce(45, 3), 
        (86, Token::In) => Action::Reduce(45, 3), 
        (86, Token::Assignment) => Action::Reduce(45, 3),
        (86, Token::Then) => Action::Reduce(45, 3), 
        (87, Token::Comma) => Action::Reduce(44, 3), 
        (87, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (87, Token::Fi) => Action::Reduce(44, 3), 
        (87, Token::Pool) => Action::Reduce(44, 3), 
        (87, Token::Of) => Action::Reduce(44, 3), 
        (87, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (87, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (87, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (87, Token::SemiColon) => Action::Reduce(44, 3), 
        (87, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (87, Token::RightBrace) => Action::Reduce(44, 3), 
        (87, Token::Loop) => Action::Reduce(44, 3), 
        (87, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (87, Token::At) => Action::Shift(58), 
        (87, Token::RightParen) => Action::Reduce(44, 3), 
        (87, Token::Dot) => Action::Shift(59), 
        (87, Token::Else) => Action::Reduce(44, 3), 
        (87, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (87, Token::In) => Action::Reduce(44, 3), 
        (87, Token::Assignment) => Action::Shift(61), 
        (87, Token::Then) => Action::Reduce(44, 3), 
        (88, Token::Comma) => Action::Reduce(33, 3), 
        (88, Token::MathOp(MathOp::Multiply)) => Action::Reduce(33, 3), 
        (88, Token::Fi) => Action::Reduce(33, 3), 
        (88, Token::Pool) => Action::Reduce(33, 3), 
        (88, Token::Of) => Action::Reduce(33, 3), 
        (88, Token::Relop(Relop::EE)) => Action::Reduce(33, 3), 
        (88, Token::MathOp(MathOp::Divide)) => Action::Reduce(33, 3), 
        (88, Token::MathOp(MathOp::Plus)) => Action::Reduce(33, 3), 
        (88, Token::SemiColon) => Action::Reduce(33, 3), 
        (88, Token::MathOp(MathOp::Minus)) => Action::Reduce(33, 3), 
        (88, Token::RightBrace) => Action::Reduce(33, 3), 
        (88, Token::Loop) => Action::Reduce(33, 3), 
        (88, Token::Relop(Relop::LT)) => Action::Reduce(33, 3), 
        (88, Token::At) => Action::Reduce(33, 3), 
        (88, Token::RightParen) => Action::Reduce(33, 3), 
        (88, Token::Dot) => Action::Reduce(33, 3), 
        (88, Token::Else) => Action::Reduce(33, 3), 
        (88, Token::Relop(Relop::LE)) => Action::Reduce(33, 3), 
        (88, Token::In) => Action::Reduce(33, 3), 
        (88, Token::Assignment) => Action::Reduce(33, 3), 
        (88, Token::Then) => Action::Reduce(33, 3), 
        (89, Token::New) => Action::Shift(33), 
        (89, Token::LeftBrace) => Action::Shift(34), 
        (89, Token::If) => Action::Shift(35), 
        (89, Token::True) => Action::Shift(36), 
        (89, Token::Let) => Action::Shift(37), 
        (89, Token::Case) => Action::Shift(38), 
        (89, Token::RightBrace) => Action::Reduce(17, 2), 
        (89, Token::Integer(_)) => Action::Shift(39), 
        (89, Token::Complement) => Action::Shift(40), 
        (89, Token::StringLiteral(_)) => Action::Shift(41), 
        (89, Token::Id(_)) => Action::Shift(42), 
        (89, Token::Isvoid) => Action::Shift(43), 
        (89, Token::LeftParen) => Action::Shift(44), 
        (89, Token::While) => Action::Shift(45), 
        (89, Token::False) => Action::Shift(46), 
        (89, Token::Not) => Action::Shift(47), 
        (90, Token::New) => Action::Shift(33), 
        (90, Token::LeftBrace) => Action::Shift(34), 
        (90, Token::If) => Action::Shift(35), 
        (90, Token::True) => Action::Shift(36), 
        (90, Token::Let) => Action::Shift(37), 
        (90, Token::Case) => Action::Shift(38), 
        (90, Token::Integer(_)) => Action::Shift(39), 
        (90, Token::Complement) => Action::Shift(40), 
        (90, Token::StringLiteral(_)) => Action::Shift(41), 
        (90, Token::Id(_)) => Action::Shift(42), 
        (90, Token::Isvoid) => Action::Shift(43), 
        (90, Token::LeftParen) => Action::Shift(44), 
        (90, Token::While) => Action::Shift(45), 
        (90, Token::False) => Action::Shift(46), 
        (90, Token::Not) => Action::Shift(47), 
        (91, Token::New) => Action::Shift(33), 
        (91, Token::LeftBrace) => Action::Shift(34), 
        (91, Token::If) => Action::Shift(35), 
        (91, Token::True) => Action::Shift(36), 
        (91, Token::Let) => Action::Shift(37), 
        (91, Token::Case) => Action::Shift(38), 
        (91, Token::Integer(_)) => Action::Shift(39), 
        (91, Token::Complement) => Action::Shift(40), 
        (91, Token::StringLiteral(_)) => Action::Shift(41), 
        (91, Token::Id(_)) => Action::Shift(42), 
        (91, Token::Isvoid) => Action::Shift(43), 
        (91, Token::LeftParen) => Action::Shift(44), 
        (91, Token::While) => Action::Shift(45), 
        (91, Token::False) => Action::Shift(46), 
        (91, Token::Not) => Action::Shift(47), 
        (92, Token::Type(_)) => Action::Shift(107), 
        (93, Token::Id(_)) => Action::Shift(109), 
        (94, Token::RightParen) => Action::Shift(110), 
        (95, Token::Comma) => Action::Shift(111), 
        (95, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (95, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (95, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (95, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (95, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (95, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (95, Token::At) => Action::Shift(58), 
        (95, Token::RightParen) => Action::Reduce(15, 1), 
        (95, Token::Dot) => Action::Shift(59), 
        (95, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (95, Token::Assignment) => Action::Shift(61), 
        (96, Token::Comma) => Action::Reduce(30, 3), 
        (96, Token::MathOp(MathOp::Multiply)) => Action::Reduce(30, 3), 
        (96, Token::Fi) => Action::Reduce(30, 3), 
        (96, Token::Pool) => Action::Reduce(30, 3), 
        (96, Token::Of) => Action::Reduce(30, 3), 
        (96, Token::Relop(Relop::EE)) => Action::Reduce(30, 3), 
        (96, Token::MathOp(MathOp::Divide)) => Action::Reduce(30, 3), 
        (96, Token::MathOp(MathOp::Plus)) => Action::Reduce(30, 3), 
        (96, Token::SemiColon) => Action::Reduce(30, 3), 
        (96, Token::MathOp(MathOp::Minus)) => Action::Reduce(30, 3), 
        (96, Token::RightBrace) => Action::Reduce(30, 3), 
        (96, Token::Loop) => Action::Reduce(30, 3), 
        (96, Token::Relop(Relop::LT)) => Action::Reduce(30, 3), 
        (96, Token::At) => Action::Reduce(30, 3), 
        (96, Token::RightParen) => Action::Reduce(30, 3), 
        (96, Token::Dot) => Action::Reduce(30, 3), 
        (96, Token::Else) => Action::Reduce(30, 3), 
        (96, Token::Relop(Relop::LE)) => Action::Reduce(30, 3), 
        (96, Token::In) => Action::Reduce(30, 3), 
        (96, Token::Assignment) => Action::Reduce(30, 3), 
        (96, Token::Then) => Action::Reduce(30, 3), 
        (97, Token::Comma) => Action::Reduce(24, 3), 
        (97, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (97, Token::Fi) => Action::Reduce(24, 3), 
        (97, Token::Pool) => Action::Reduce(24, 3), 
        (97, Token::Of) => Action::Reduce(24, 3), 
        (97, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (97, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (97, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (97, Token::SemiColon) => Action::Reduce(24, 3), 
        (97, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (97, Token::RightBrace) => Action::Reduce(24, 3), 
        (97, Token::Loop) => Action::Reduce(24, 3), 
        (97, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (97, Token::At) => Action::Shift(58), 
        (97, Token::RightParen) => Action::Reduce(24, 3), 
        (97, Token::Dot) => Action::Shift(59), 
        (97, Token::Else) => Action::Reduce(24, 3), 
        (97, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (97, Token::In) => Action::Reduce(24, 3), 
        (97, Token::Assignment) => Action::Shift(61), 
        (97, Token::Then) => Action::Reduce(24, 3), 
        (98, Token::Comma) => Action::Reduce(48, 3), 
        (98, Token::MathOp(MathOp::Multiply)) => Action::Reduce(48, 3), 
        (98, Token::Fi) => Action::Reduce(48, 3), 
        (98, Token::Pool) => Action::Reduce(48, 3), 
        (98, Token::Of) => Action::Reduce(48, 3), 
        (98, Token::Relop(Relop::EE)) => Action::Reduce(48, 3), 
        (98, Token::MathOp(MathOp::Divide)) => Action::Reduce(48, 3), 
        (98, Token::MathOp(MathOp::Plus)) => Action::Reduce(48, 3), 
        (98, Token::SemiColon) => Action::Reduce(48, 3), 
        (98, Token::MathOp(MathOp::Minus)) => Action::Reduce(48, 3), 
        (98, Token::RightBrace) => Action::Reduce(48, 3), 
        (98, Token::Loop) => Action::Reduce(48, 3), 
        (98, Token::Relop(Relop::LT)) => Action::Reduce(48, 3), 
        (98, Token::At) => Action::Reduce(48, 3), 
        (98, Token::RightParen) => Action::Reduce(48, 3), 
        (98, Token::Dot) => Action::Reduce(48, 3), 
        (98, Token::Else) => Action::Reduce(48, 3), 
        (98, Token::Relop(Relop::LE)) => Action::Reduce(48, 3), 
        (98, Token::In) => Action::Reduce(48, 3), 
        (98, Token::Assignment) => Action::Reduce(48, 3), 
        (98, Token::Then) => Action::Reduce(48, 3), 
        (99, Token::New) => Action::Shift(33), 
        (99, Token::LeftBrace) => Action::Shift(34), 
        (99, Token::If) => Action::Shift(35), 
        (99, Token::True) => Action::Shift(36), 
        (99, Token::Let) => Action::Shift(37), 
        (99, Token::Case) => Action::Shift(38), 
        (99, Token::Integer(_)) => Action::Shift(39), 
        (99, Token::Complement) => Action::Shift(40), 
        (99, Token::StringLiteral(_)) => Action::Shift(41), 
        (99, Token::Id(_)) => Action::Shift(42), 
        (99, Token::Isvoid) => Action::Shift(43), 
        (99, Token::LeftParen) => Action::Shift(44), 
        (99, Token::While) => Action::Shift(45), 
        (99, Token::False) => Action::Shift(46), 
        (99, Token::Not) => Action::Shift(47), 
        (100, Token::New) => Action::Shift(33), 
        (100, Token::LeftBrace) => Action::Shift(34), 
        (100, Token::If) => Action::Shift(35), 
        (100, Token::True) => Action::Shift(36), 
        (100, Token::Let) => Action::Shift(37), 
        (100, Token::Case) => Action::Shift(38), 
        (100, Token::Integer(_)) => Action::Shift(39), 
        (100, Token::Complement) => Action::Shift(40), 
        (100, Token::StringLiteral(_)) => Action::Shift(41), 
        (100, Token::Id(_)) => Action::Shift(42), 
        (100, Token::Isvoid) => Action::Shift(43), 
        (100, Token::LeftParen) => Action::Shift(44), 
        (100, Token::While) => Action::Shift(45), 
        (100, Token::False) => Action::Shift(46), 
        (100, Token::Not) => Action::Shift(47), 
        (101, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (101, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (101, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (101, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (101, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (101, Token::RightBrace) => Action::Shift(114), 
        (101, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (101, Token::At) => Action::Shift(58), 
        (101, Token::Dot) => Action::Shift(59), 
        (101, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (101, Token::Assignment) => Action::Shift(61), 
        (102, Token::Id(_)) => Action::Shift(115), 
        (103, Token::New) => Action::Shift(33), 
        (103, Token::LeftBrace) => Action::Shift(34), 
        (103, Token::If) => Action::Shift(35), 
        (103, Token::True) => Action::Shift(36), 
        (103, Token::Let) => Action::Shift(37), 
        (103, Token::Case) => Action::Shift(38), 
        (103, Token::Integer(_)) => Action::Shift(39), 
        (103, Token::Complement) => Action::Shift(40), 
        (103, Token::StringLiteral(_)) => Action::Shift(41), 
        (103, Token::Id(_)) => Action::Shift(42), 
        (103, Token::Isvoid) => Action::Shift(43), 
        (103, Token::LeftParen) => Action::Shift(44), 
        (103, Token::RightParen) => Action::Shift(117), 
        (103, Token::While) => Action::Shift(45), 
        (103, Token::False) => Action::Shift(46), 
        (103, Token::Not) => Action::Shift(47), 
        (104, Token::RightBrace) => Action::Reduce(16, 3), 
        (105, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (105, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (105, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (105, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (105, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (105, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (105, Token::At) => Action::Shift(58), 
        (105, Token::Dot) => Action::Shift(59), 
        (105, Token::Else) => Action::Shift(118), 
        (105, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (105, Token::Assignment) => Action::Shift(61), 
        (106, Token::Comma) => Action::Reduce(34, 4), 
        (106, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (106, Token::Fi) => Action::Reduce(34, 4), 
        (106, Token::Pool) => Action::Reduce(34, 4), 
        (106, Token::Of) => Action::Reduce(34, 4), 
        (106, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (106, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (106, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (106, Token::SemiColon) => Action::Reduce(34, 4), 
        (106, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (106, Token::RightBrace) => Action::Reduce(34, 4), 
        (106, Token::Loop) => Action::Reduce(34, 4), 
        (106, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (106, Token::At) => Action::Shift(58), 
        (106, Token::RightParen) => Action::Reduce(34, 4), 
        (106, Token::Dot) => Action::Shift(59), 
        (106, Token::Else) => Action::Reduce(34, 4), 
        (106, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (106, Token::In) => Action::Reduce(34, 4), 
        (106, Token::Assignment) => Action::Shift(61), 
        (106, Token::Then) => Action::Reduce(34, 4), 
        (107, Token::Comma) => Action::Shift(119), 
        (107, Token::In) => Action::Reduce(21, 3), 
        (107, Token::Assignment) => Action::Shift(120), 
        (108, Token::Esac) => Action::Shift(121), 
        (109, Token::Colon) => Action::Shift(122), 
        (110, Token::Comma) => Action::Reduce(29, 4), 
        (110, Token::MathOp(MathOp::Multiply)) => Action::Reduce(29, 4), 
        (110, Token::Fi) => Action::Reduce(29, 4), 
        (110, Token::Pool) => Action::Reduce(29, 4), 
        (110, Token::Of) => Action::Reduce(29, 4), 
        (110, Token::Relop(Relop::EE)) => Action::Reduce(29, 4), 
        (110, Token::MathOp(MathOp::Divide)) => Action::Reduce(29, 4), 
        (110, Token::MathOp(MathOp::Plus)) => Action::Reduce(29, 4), 
        (110, Token::SemiColon) => Action::Reduce(29, 4), 
        (110, Token::MathOp(MathOp::Minus)) => Action::Reduce(29, 4), 
        (110, Token::RightBrace) => Action::Reduce(29, 4), 
        (110, Token::Loop) => Action::Reduce(29, 4), 
        (110, Token::Relop(Relop::LT)) => Action::Reduce(29, 4), 
        (110, Token::At) => Action::Reduce(29, 4), 
        (110, Token::RightParen) => Action::Reduce(29, 4), 
        (110, Token::Dot) => Action::Reduce(29, 4), 
        (110, Token::Else) => Action::Reduce(29, 4), 
        (110, Token::Relop(Relop::LE)) => Action::Reduce(29, 4), 
        (110, Token::In) => Action::Reduce(29, 4), 
        (110, Token::Assignment) => Action::Reduce(29, 4), 
        (110, Token::Then) => Action::Reduce(29, 4), 
        (111, Token::New) => Action::Shift(33), 
        (111, Token::LeftBrace) => Action::Shift(34), 
        (111, Token::If) => Action::Shift(35), 
        (111, Token::True) => Action::Shift(36), 
        (111, Token::Let) => Action::Shift(37), 
        (111, Token::Case) => Action::Shift(38), 
        (111, Token::Integer(_)) => Action::Shift(39), 
        (111, Token::Complement) => Action::Shift(40), 
        (111, Token::StringLiteral(_)) => Action::Shift(41), 
        (111, Token::Id(_)) => Action::Shift(42), 
        (111, Token::Isvoid) => Action::Shift(43), 
        (111, Token::LeftParen) => Action::Shift(44), 
        (111, Token::While) => Action::Shift(45), 
        (111, Token::False) => Action::Shift(46), 
        (111, Token::Not) => Action::Shift(47), 
        (112, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (112, Token::Pool) => Action::Shift(124), 
        (112, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (112, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (112, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (112, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (112, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (112, Token::At) => Action::Shift(58), 
        (112, Token::Dot) => Action::Shift(59), 
        (112, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (112, Token::Assignment) => Action::Shift(61), 
        (113, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (113, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (113, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (113, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (113, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (113, Token::RightBrace) => Action::Shift(125), 
        (113, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (113, Token::At) => Action::Shift(58), 
        (113, Token::Dot) => Action::Shift(59), 
        (113, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (113, Token::Assignment) => Action::Shift(61), 
        (114, Token::SemiColon) => Action::Reduce(8, 8), 
        (115, Token::LeftParen) => Action::Shift(126), 
        (116, Token::RightParen) => Action::Shift(127), 
        (117, Token::Comma) => Action::Reduce(26, 5), 
        (117, Token::MathOp(MathOp::Multiply)) => Action::Reduce(26, 5), 
        (117, Token::Fi) => Action::Reduce(26, 5), 
        (117, Token::Pool) => Action::Reduce(26, 5), 
        (117, Token::Of) => Action::Reduce(26, 5), 
        (117, Token::Relop(Relop::EE)) => Action::Reduce(26, 5), 
        (117, Token::MathOp(MathOp::Divide)) => Action::Reduce(26, 5), 
        (117, Token::MathOp(MathOp::Plus)) => Action::Reduce(26, 5), 
        (117, Token::SemiColon) => Action::Reduce(26, 5), 
        (117, Token::MathOp(MathOp::Minus)) => Action::Reduce(26, 5), 
        (117, Token::RightBrace) => Action::Reduce(26, 5), 
        (117, Token::Loop) => Action::Reduce(26, 5), 
        (117, Token::Relop(Relop::LT)) => Action::Reduce(26, 5), 
        (117, Token::At) => Action::Reduce(26, 5), 
        (117, Token::RightParen) => Action::Reduce(26, 5), 
        (117, Token::Dot) => Action::Reduce(26, 5), 
        (117, Token::Else) => Action::Reduce(26, 5), 
        (117, Token::Relop(Relop::LE)) => Action::Reduce(26, 5), 
        (117, Token::In) => Action::Reduce(26, 5), 
        (117, Token::Assignment) => Action::Reduce(26, 5), 
        (117, Token::Then) => Action::Reduce(26, 5), 
        (118, Token::New) => Action::Shift(33), 
        (118, Token::LeftBrace) => Action::Shift(34), 
        (118, Token::If) => Action::Shift(35), 
        (118, Token::True) => Action::Shift(36), 
        (118, Token::Let) => Action::Shift(37), 
        (118, Token::Case) => Action::Shift(38), 
        (118, Token::Integer(_)) => Action::Shift(39), 
        (118, Token::Complement) => Action::Shift(40), 
        (118, Token::StringLiteral(_)) => Action::Shift(41), 
        (118, Token::Id(_)) => Action::Shift(42), 
        (118, Token::Isvoid) => Action::Shift(43), 
        (118, Token::LeftParen) => Action::Shift(44), 
        (118, Token::While) => Action::Shift(45), 
        (118, Token::False) => Action::Shift(46), 
        (118, Token::Not) => Action::Shift(47), 
        (119, Token::Id(_)) => Action::Shift(67), 
        (120, Token::New) => Action::Shift(33), 
        (120, Token::LeftBrace) => Action::Shift(34), 
        (120, Token::If) => Action::Shift(35), 
        (120, Token::True) => Action::Shift(36), 
        (120, Token::Let) => Action::Shift(37), 
        (120, Token::Case) => Action::Shift(38), 
        (120, Token::Integer(_)) => Action::Shift(39), 
        (120, Token::Complement) => Action::Shift(40), 
        (120, Token::StringLiteral(_)) => Action::Shift(41), 
        (120, Token::Id(_)) => Action::Shift(42), 
        (120, Token::Isvoid) => Action::Shift(43), 
        (120, Token::LeftParen) => Action::Shift(44), 
        (120, Token::While) => Action::Shift(45), 
        (120, Token::False) => Action::Shift(46), 
        (120, Token::Not) => Action::Shift(47), 
        (121, Token::Comma) => Action::Reduce(35, 5), 
        (121, Token::MathOp(MathOp::Multiply)) => Action::Reduce(35, 5), 
        (121, Token::Fi) => Action::Reduce(35, 5), 
        (121, Token::Pool) => Action::Reduce(35, 5), 
        (121, Token::Of) => Action::Reduce(35, 5), 
        (121, Token::Relop(Relop::EE)) => Action::Reduce(35, 5), 
        (121, Token::MathOp(MathOp::Divide)) => Action::Reduce(35, 5), 
        (121, Token::MathOp(MathOp::Plus)) => Action::Reduce(35, 5), 
        (121, Token::SemiColon) => Action::Reduce(35, 5), 
        (121, Token::MathOp(MathOp::Minus)) => Action::Reduce(35, 5), 
        (121, Token::RightBrace) => Action::Reduce(35, 5), 
        (121, Token::Loop) => Action::Reduce(35, 5), 
        (121, Token::Relop(Relop::LT)) => Action::Reduce(35, 5), 
        (121, Token::At) => Action::Reduce(35, 5), 
        (121, Token::RightParen) => Action::Reduce(35, 5), 
        (121, Token::Dot) => Action::Reduce(35, 5), 
        (121, Token::Else) => Action::Reduce(35, 5), 
        (121, Token::Relop(Relop::LE)) => Action::Reduce(35, 5), 
        (121, Token::In) => Action::Reduce(35, 5), 
        (121, Token::Assignment) => Action::Reduce(35, 5), 
        (121, Token::Then) => Action::Reduce(35, 5), 
        (122, Token::Type(_)) => Action::Shift(131), 
        (123, Token::RightParen) => Action::Reduce(14, 3), 
        (124, Token::Comma) => Action::Reduce(32, 5), 
        (124, Token::MathOp(MathOp::Multiply)) => Action::Reduce(32, 5), 
        (124, Token::Fi) => Action::Reduce(32, 5), 
        (124, Token::Pool) => Action::Reduce(32, 5), 
        (124, Token::Of) => Action::Reduce(32, 5), 
        (124, Token::Relop(Relop::EE)) => Action::Reduce(32, 5), 
        (124, Token::MathOp(MathOp::Divide)) => Action::Reduce(32, 5), 
        (124, Token::MathOp(MathOp::Plus)) => Action::Reduce(32, 5), 
        (124, Token::SemiColon) => Action::Reduce(32, 5), 
        (124, Token::MathOp(MathOp::Minus)) => Action::Reduce(32, 5), 
        (124, Token::RightBrace) => Action::Reduce(32, 5), 
        (124, Token::Loop) => Action::Reduce(32, 5), 
        (124, Token::Relop(Relop::LT)) => Action::Reduce(32, 5), 
        (124, Token::At) => Action::Reduce(32, 5), 
        (124, Token::RightParen) => Action::Reduce(32, 5), 
        (124, Token::Dot) => Action::Reduce(32, 5), 
        (124, Token::Else) => Action::Reduce(32, 5), 
        (124, Token::Relop(Relop::LE)) => Action::Reduce(32, 5), 
        (124, Token::In) => Action::Reduce(32, 5), 
        (124, Token::Assignment) => Action::Reduce(32, 5), 
        (124, Token::Then) => Action::Reduce(32, 5), 
        (125, Token::SemiColon) => Action::Reduce(7, 9), 
        (126, Token::New) => Action::Shift(33), 
        (126, Token::LeftBrace) => Action::Shift(34), 
        (126, Token::If) => Action::Shift(35), 
        (126, Token::True) => Action::Shift(36), 
        (126, Token::Let) => Action::Shift(37), 
        (126, Token::Case) => Action::Shift(38), 
        (126, Token::Integer(_)) => Action::Shift(39), 
        (126, Token::Complement) => Action::Shift(40), 
        (126, Token::StringLiteral(_)) => Action::Shift(41), 
        (126, Token::Id(_)) => Action::Shift(42), 
        (126, Token::Isvoid) => Action::Shift(43), 
        (126, Token::LeftParen) => Action::Shift(44), 
        (126, Token::RightParen) => Action::Shift(133), 
        (126, Token::While) => Action::Shift(45), 
        (126, Token::False) => Action::Shift(46), 
        (126, Token::Not) => Action::Shift(47), 
        (127, Token::Comma) => Action::Reduce(25, 6), 
        (127, Token::MathOp(MathOp::Multiply)) => Action::Reduce(25, 6), 
        (127, Token::Fi) => Action::Reduce(25, 6), 
        (127, Token::Pool) => Action::Reduce(25, 6), 
        (127, Token::Of) => Action::Reduce(25, 6), 
        (127, Token::Relop(Relop::EE)) => Action::Reduce(25, 6), 
        (127, Token::MathOp(MathOp::Divide)) => Action::Reduce(25, 6), 
        (127, Token::MathOp(MathOp::Plus)) => Action::Reduce(25, 6), 
        (127, Token::SemiColon) => Action::Reduce(25, 6), 
        (127, Token::MathOp(MathOp::Minus)) => Action::Reduce(25, 6), 
        (127, Token::RightBrace) => Action::Reduce(25, 6), 
        (127, Token::Loop) => Action::Reduce(25, 6), 
        (127, Token::Relop(Relop::LT)) => Action::Reduce(25, 6), 
        (127, Token::At) => Action::Reduce(25, 6), 
        (127, Token::RightParen) => Action::Reduce(25, 6), 
        (127, Token::Dot) => Action::Reduce(25, 6), 
        (127, Token::Else) => Action::Reduce(25, 6), 
        (127, Token::Relop(Relop::LE)) => Action::Reduce(25, 6), 
        (127, Token::In) => Action::Reduce(25, 6), 
        (127, Token::Assignment) => Action::Reduce(25, 6), 
        (127, Token::Then) => Action::Reduce(25, 6), 
        (128, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (128, Token::Fi) => Action::Shift(134), 
        (128, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (128, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (128, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (128, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (128, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (128, Token::At) => Action::Shift(58), 
        (128, Token::Dot) => Action::Shift(59), 
        (128, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (128, Token::Assignment) => Action::Shift(61), 
        (129, Token::In) => Action::Reduce(19, 5), 
        (130, Token::Comma) => Action::Shift(135), 
        (130, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (130, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (130, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (130, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (130, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (130, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (130, Token::At) => Action::Shift(58), 
        (130, Token::Dot) => Action::Shift(59), 
        (130, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (130, Token::In) => Action::Reduce(20, 5), 
        (130, Token::Assignment) => Action::Shift(61), 
        (131, Token::FatArrow) => Action::Shift(136), 
        (132, Token::RightParen) => Action::Shift(137), 
        (133, Token::Comma) => Action::Reduce(28, 7), 
        (133, Token::MathOp(MathOp::Multiply)) => Action::Reduce(28, 7), 
        (133, Token::Fi) => Action::Reduce(28, 7), 
        (133, Token::Pool) => Action::Reduce(28, 7), 
        (133, Token::Of) => Action::Reduce(28, 7), 
        (133, Token::Relop(Relop::EE)) => Action::Reduce(28, 7), 
        (133, Token::MathOp(MathOp::Divide)) => Action::Reduce(28, 7), 
        (133, Token::MathOp(MathOp::Plus)) => Action::Reduce(28, 7), 
        (133, Token::SemiColon) => Action::Reduce(28, 7), 
        (133, Token::MathOp(MathOp::Minus)) => Action::Reduce(28, 7), 
        (133, Token::RightBrace) => Action::Reduce(28, 7), 
        (133, Token::Loop) => Action::Reduce(28, 7), 
        (133, Token::Relop(Relop::LT)) => Action::Reduce(28, 7), 
        (133, Token::At) => Action::Reduce(28, 7), 
        (133, Token::RightParen) => Action::Reduce(28, 7), 
        (133, Token::Dot) => Action::Reduce(28, 7), 
        (133, Token::Else) => Action::Reduce(28, 7), 
        (133, Token::Relop(Relop::LE)) => Action::Reduce(28, 7), 
        (133, Token::In) => Action::Reduce(28, 7), 
        (133, Token::Assignment) => Action::Reduce(28, 7), 
        (133, Token::Then) => Action::Reduce(28, 7), 
        (134, Token::Comma) => Action::Reduce(31, 7), 
        (134, Token::MathOp(MathOp::Multiply)) => Action::Reduce(31, 7), 
        (134, Token::Fi) => Action::Reduce(31, 7), 
        (134, Token::Pool) => Action::Reduce(31, 7), 
        (134, Token::Of) => Action::Reduce(31, 7), 
        (134, Token::Relop(Relop::EE)) => Action::Reduce(31, 7), 
        (134, Token::MathOp(MathOp::Divide)) => Action::Reduce(31, 7), 
        (134, Token::MathOp(MathOp::Plus)) => Action::Reduce(31, 7), 
        (134, Token::SemiColon) => Action::Reduce(31, 7), 
        (134, Token::MathOp(MathOp::Minus)) => Action::Reduce(31, 7), 
        (134, Token::RightBrace) => Action::Reduce(31, 7), 
        (134, Token::Loop) => Action::Reduce(31, 7), 
        (134, Token::Relop(Relop::LT)) => Action::Reduce(31, 7), 
        (134, Token::At) => Action::Reduce(31, 7), 
        (134, Token::RightParen) => Action::Reduce(31, 7), 
        (134, Token::Dot) => Action::Reduce(31, 7), 
        (134, Token::Else) => Action::Reduce(31, 7), 
        (134, Token::Relop(Relop::LE)) => Action::Reduce(31, 7), 
        (134, Token::In) => Action::Reduce(31, 7), 
        (134, Token::Assignment) => Action::Reduce(31, 7), 
        (134, Token::Then) => Action::Reduce(31, 7), 
        (135, Token::Id(_)) => Action::Shift(67), 
        (136, Token::New) => Action::Shift(33), 
        (136, Token::LeftBrace) => Action::Shift(34), 
        (136, Token::If) => Action::Shift(35), 
        (136, Token::True) => Action::Shift(36), 
        (136, Token::Let) => Action::Shift(37), 
        (136, Token::Case) => Action::Shift(38), 
        (136, Token::Integer(_)) => Action::Shift(39), 
        (136, Token::Complement) => Action::Shift(40), 
        (136, Token::StringLiteral(_)) => Action::Shift(41), 
        (136, Token::Id(_)) => Action::Shift(42), 
        (136, Token::Isvoid) => Action::Shift(43), 
        (136, Token::LeftParen) => Action::Shift(44), 
        (136, Token::While) => Action::Shift(45), 
        (136, Token::False) => Action::Shift(46), 
        (136, Token::Not) => Action::Shift(47), 
        (137, Token::Comma) => Action::Reduce(27, 8), 
        (137, Token::MathOp(MathOp::Multiply)) => Action::Reduce(27, 8), 
        (137, Token::Fi) => Action::Reduce(27, 8), 
        (137, Token::Pool) => Action::Reduce(27, 8), 
        (137, Token::Of) => Action::Reduce(27, 8), 
        (137, Token::Relop(Relop::EE)) => Action::Reduce(27, 8), 
        (137, Token::MathOp(MathOp::Divide)) => Action::Reduce(27, 8), 
        (137, Token::MathOp(MathOp::Plus)) => Action::Reduce(27, 8), 
        (137, Token::SemiColon) => Action::Reduce(27, 8), 
        (137, Token::MathOp(MathOp::Minus)) => Action::Reduce(27, 8), 
        (137, Token::RightBrace) => Action::Reduce(27, 8), 
        (137, Token::Loop) => Action::Reduce(27, 8), 
        (137, Token::Relop(Relop::LT)) => Action::Reduce(27, 8), 
        (137, Token::At) => Action::Reduce(27, 8), 
        (137, Token::RightParen) => Action::Reduce(27, 8), 
        (137, Token::Dot) => Action::Reduce(27, 8), 
        (137, Token::Else) => Action::Reduce(27, 8), 
        (137, Token::Relop(Relop::LE)) => Action::Reduce(27, 8), 
        (137, Token::In) => Action::Reduce(27, 8), 
        (137, Token::Assignment) => Action::Reduce(27, 8), 
        (137, Token::Then) => Action::Reduce(27, 8), 
        (138, Token::In) => Action::Reduce(18, 7), 
        (139, Token::MathOp(MathOp::Multiply)) => Action::Shift(52), 
        (139, Token::Relop(Relop::EE)) => Action::Shift(53), 
        (139, Token::MathOp(MathOp::Divide)) => Action::Shift(54), 
        (139, Token::MathOp(MathOp::Plus)) => Action::Shift(55), 
        (139, Token::SemiColon) => Action::Shift(140), 
        (139, Token::MathOp(MathOp::Minus)) => Action::Shift(56), 
        (139, Token::Relop(Relop::LT)) => Action::Shift(57), 
        (139, Token::At) => Action::Shift(58), 
        (139, Token::Dot) => Action::Shift(59), 
        (139, Token::Relop(Relop::LE)) => Action::Shift(60), 
        (139, Token::Assignment) => Action::Shift(61), 
        (140, Token::Esac) => Action::Reduce(23, 6), 
        (140, Token::Id(_)) => Action::Shift(109), 
        (141, Token::Esac) => Action::Reduce(22, 7), 
        // }}}
        _ => Action::Error,
    }
}

fn goto(state: u8, nonterminal: u8) -> Result<u8, String>{
    match (state, nonterminal) {
        // {{{ Parser Table: Gotos on Nonterminals
        (0, 0) => Ok(1),
        (0, 1) => Ok(2),
        (4, 0) => Ok(6),
        (4, 1) => Ok(2),
        (7, 2) => Ok(9),
        (7, 3) => Ok(10),
        (14, 2) => Ok(18),
        (14, 3) => Ok(10),
        (16, 4) => Ok(20),
        (16, 5) => Ok(21),
        (17, 2) => Ok(24),
        (17, 3) => Ok(10),
        (26, 10) => Ok(32),
        (28, 4) => Ok(49),
        (28, 5) => Ok(21),
        (34, 7) => Ok(63),
        (34, 10) => Ok(64),
        (35, 10) => Ok(65),
        (37, 8) => Ok(66),
        (38, 10) => Ok(68),
        (40, 10) => Ok(69),
        (43, 10) => Ok(72),
        (44, 10) => Ok(73),
        (45, 10) => Ok(74),
        (47, 10) => Ok(75),
        (52, 10) => Ok(78),
        (53, 10) => Ok(79),
        (54, 10) => Ok(80),
        (55, 10) => Ok(81),
        (56, 10) => Ok(82),
        (57, 10) => Ok(83),
        (60, 10) => Ok(86),
        (61, 10) => Ok(87),
        (70, 6) => Ok(94),
        (70, 10) => Ok(95),
        (71, 10) => Ok(97),
        (77, 10) => Ok(101),
        (89, 7) => Ok(104),
        (89, 10) => Ok(64),
        (90, 10) => Ok(105),
        (91, 10) => Ok(106),
        (93, 9) => Ok(108),
        (99, 10) => Ok(112),
        (100, 10) => Ok(113),
        (103, 6) => Ok(116),
        (103, 10) => Ok(95),
        (111, 6) => Ok(123),
        (111, 10) => Ok(95),
        (118, 10) => Ok(128),
        (119, 8) => Ok(129),
        (120, 10) => Ok(130),
        (126, 6) => Ok(132),
        (126, 10) => Ok(95),
        (135, 8) => Ok(138),
        (136, 10) => Ok(139),
        (140, 9) => Ok(141),
        // }}}
        _ => Err(format!("Invalid Entry ({}, {})", state, nonterminal)),
    }
}

pub struct Parser {
    lex: Lexer,
    stack: Vec<u8>,
}

impl Parser {
    pub fn new(lex: Lexer) -> Parser {
        Parser {
            lex,
            stack: vec![0],
        }
    }

    pub fn parse(&mut self) {
        let mut t = self.lex.next();

        while t != None {
            let token = t.clone().unwrap();
            let top = self.stack.last().unwrap();

            println!("token: {}, stack: {:?}", token, self.stack);
            match action(top, &token) {
                Action::Shift(u) => {
                    self.stack.push(u);
                    t = self.lex.next();
                }
                Action::Reduce(n, l) => {
                    self.stack.truncate(self.stack.len() - (l as usize));

                    println!("\t\t{}", production(n).unwrap());
                    let top = *self.stack.last().unwrap();
                    let production_head = head_of_production(n).unwrap();
                    let new_state = goto(top, production_head).unwrap();
                    
                    self.stack.push(new_state);
                }
                Action::Accept => {
                    return;
                }
                Action::Error => {
                    panic!("[SYNTAX ERROR] at {}", self.lex.line_number());
                }
            }

        }
    }
}
